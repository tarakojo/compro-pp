// Signature file for parser generated by fsyacc
module Read.Parser
type token = 
  | END
  | COLON
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | POW
  | DOT
  | LBRACE
  | RBRACE
  | LPAREN
  | RPAREN
  | INT of (int)
  | CODE of (string)
  | IDENT of (string)
type tokenId = 
    | TOKEN_END
    | TOKEN_COLON
    | TOKEN_COMMA
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_POW
    | TOKEN_DOT
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_INT
    | TOKEN_CODE
    | TOKEN_IDENT
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startexpr
    | NONTERM_expr
    | NONTERM_e
    | NONTERM_s
    | NONTERM_a
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val expr : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (Syntax.Expr) 
