// Implementation file for parser generated by fsyacc
module Read.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "src/Read/Parser.fsy"

(*
文法

S ::= <ident>
    | <ident> : T
    | S [ A ]
    | S S 
    | (S)

A ::= <ident>
    | <ident> + <ident>
    | <ident> - <ident>
    | <ident> * <ident>
    | <ident> / <ident>
    | <ident> % <ident>
    | <ident> ^ <ident>
    | `<code>` 

T ::= <ident>
    | `<code>` 
*)
open Syntax

# 31 "src/Read/gen/Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | END
  | COLON
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | POW
  | DOT
  | LBRACE
  | RBRACE
  | LPAREN
  | RPAREN
  | INT of (int)
  | CODE of (string)
  | IDENT of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_END
    | TOKEN_COLON
    | TOKEN_COMMA
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_POW
    | TOKEN_DOT
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_INT
    | TOKEN_CODE
    | TOKEN_IDENT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startexpr
    | NONTERM_expr
    | NONTERM_e
    | NONTERM_s
    | NONTERM_a

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | END  -> 0 
  | COLON  -> 1 
  | COMMA  -> 2 
  | PLUS  -> 3 
  | MINUS  -> 4 
  | TIMES  -> 5 
  | DIV  -> 6 
  | MOD  -> 7 
  | POW  -> 8 
  | DOT  -> 9 
  | LBRACE  -> 10 
  | RBRACE  -> 11 
  | LPAREN  -> 12 
  | RPAREN  -> 13 
  | INT _ -> 14 
  | CODE _ -> 15 
  | IDENT _ -> 16 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_END 
  | 1 -> TOKEN_COLON 
  | 2 -> TOKEN_COMMA 
  | 3 -> TOKEN_PLUS 
  | 4 -> TOKEN_MINUS 
  | 5 -> TOKEN_TIMES 
  | 6 -> TOKEN_DIV 
  | 7 -> TOKEN_MOD 
  | 8 -> TOKEN_POW 
  | 9 -> TOKEN_DOT 
  | 10 -> TOKEN_LBRACE 
  | 11 -> TOKEN_RBRACE 
  | 12 -> TOKEN_LPAREN 
  | 13 -> TOKEN_RPAREN 
  | 14 -> TOKEN_INT 
  | 15 -> TOKEN_CODE 
  | 16 -> TOKEN_IDENT 
  | 19 -> TOKEN_end_of_input
  | 17 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startexpr 
    | 1 -> NONTERM_expr 
    | 2 -> NONTERM_e 
    | 3 -> NONTERM_e 
    | 4 -> NONTERM_e 
    | 5 -> NONTERM_s 
    | 6 -> NONTERM_s 
    | 7 -> NONTERM_s 
    | 8 -> NONTERM_s 
    | 9 -> NONTERM_s 
    | 10 -> NONTERM_s 
    | 11 -> NONTERM_a 
    | 12 -> NONTERM_a 
    | 13 -> NONTERM_a 
    | 14 -> NONTERM_a 
    | 15 -> NONTERM_a 
    | 16 -> NONTERM_a 
    | 17 -> NONTERM_a 
    | 18 -> NONTERM_a 
    | 19 -> NONTERM_a 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 19 
let _fsyacc_tagOfErrorTerminal = 17

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | END  -> "END" 
  | COLON  -> "COLON" 
  | COMMA  -> "COMMA" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | POW  -> "POW" 
  | DOT  -> "DOT" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | INT _ -> "INT" 
  | CODE _ -> "CODE" 
  | IDENT _ -> "IDENT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | END  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CODE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;4us;65535us;0us;2us;4us;5us;6us;7us;18us;19us;4us;65535us;0us;4us;4us;4us;6us;4us;18us;4us;8us;65535us;12us;13us;15us;16us;29us;23us;30us;24us;31us;25us;32us;26us;33us;27us;34us;28us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;8us;13us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;1us;5us;2us;3us;4us;8us;9us;1us;2us;1us;3us;1us;3us;3us;5us;6us;7us;2us;6us;7us;1us;6us;1us;7us;2us;8us;9us;7us;8us;13us;14us;15us;16us;17us;18us;1us;8us;1us;9us;7us;9us;13us;14us;15us;16us;17us;18us;1us;9us;1us;10us;1us;10us;1us;10us;1us;11us;1us;12us;7us;13us;13us;14us;15us;16us;17us;18us;7us;13us;14us;14us;15us;16us;17us;18us;7us;13us;14us;15us;15us;16us;17us;18us;7us;13us;14us;15us;16us;16us;17us;18us;7us;13us;14us;15us;16us;17us;17us;18us;7us;13us;14us;15us;16us;17us;18us;18us;1us;13us;1us;14us;1us;15us;1us;16us;1us;17us;1us;18us;1us;19us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;14us;16us;18us;20us;24us;27us;29us;31us;34us;42us;44us;46us;54us;56us;58us;60us;62us;64us;66us;74us;82us;90us;98us;106us;114us;116us;118us;120us;122us;124us;126us;|]
let _fsyacc_action_rows = 36
let _fsyacc_actionTableElements = [|2us;32768us;12us;18us;16us;8us;0us;49152us;1us;32768us;0us;3us;0us;16385us;4us;16388us;2us;6us;10us;12us;12us;18us;16us;8us;0us;16386us;2us;32768us;12us;18us;16us;8us;0us;16387us;1us;16389us;1us;9us;2us;32768us;15us;11us;16us;10us;0us;16390us;0us;16391us;4us;32768us;9us;15us;14us;22us;15us;35us;16us;21us;7us;32768us;3us;29us;4us;30us;5us;31us;6us;32us;7us;33us;8us;34us;11us;14us;0us;16392us;3us;32768us;14us;22us;15us;35us;16us;21us;7us;32768us;3us;29us;4us;30us;5us;31us;6us;32us;7us;33us;8us;34us;11us;17us;0us;16393us;2us;32768us;12us;18us;16us;8us;1us;32768us;13us;20us;0us;16394us;0us;16395us;0us;16396us;4us;16397us;5us;31us;6us;32us;7us;33us;8us;34us;4us;16398us;5us;31us;6us;32us;7us;33us;8us;34us;1us;16399us;8us;34us;1us;16400us;8us;34us;1us;16401us;8us;34us;1us;16402us;8us;34us;3us;32768us;14us;22us;15us;35us;16us;21us;3us;32768us;14us;22us;15us;35us;16us;21us;3us;32768us;14us;22us;15us;35us;16us;21us;3us;32768us;14us;22us;15us;35us;16us;21us;3us;32768us;14us;22us;15us;35us;16us;21us;3us;32768us;14us;22us;15us;35us;16us;21us;0us;16403us;|]
let _fsyacc_actionTableRowOffsets = [|0us;3us;4us;6us;7us;12us;13us;16us;17us;19us;22us;23us;24us;29us;37us;38us;42us;50us;51us;54us;56us;57us;58us;59us;64us;69us;71us;73us;75us;77us;81us;85us;89us;93us;97us;101us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;2us;3us;1us;1us;3us;3us;4us;5us;3us;1us;1us;3us;3us;3us;3us;3us;3us;1us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;2us;3us;3us;3us;3us;3us;3us;4us;4us;4us;4us;4us;4us;4us;4us;4us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;65535us;16386us;65535us;16387us;65535us;65535us;16390us;16391us;65535us;65535us;16392us;65535us;65535us;16393us;65535us;65535us;16394us;16395us;16396us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16403us;|]
let _fsyacc_reductions = lazy [|
# 205 "src/Read/gen/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startexpr));
# 214 "src/Read/gen/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_e in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "src/Read/Parser.fsy"
                                 _1 
                   )
# 48 "src/Read/Parser.fsy"
                 : Syntax.Expr));
# 225 "src/Read/gen/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_s in
            let _2 = parseState.GetInput(2) :?> 'gentype_e in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "src/Read/Parser.fsy"
                               ESeq(_1,_2) 
                   )
# 51 "src/Read/Parser.fsy"
                 : 'gentype_e));
# 237 "src/Read/gen/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_s in
            let _3 = parseState.GetInput(3) :?> 'gentype_e in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "src/Read/Parser.fsy"
                                     ESeq(_1,_3) 
                   )
# 52 "src/Read/Parser.fsy"
                 : 'gentype_e));
# 249 "src/Read/gen/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_s in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "src/Read/Parser.fsy"
                             _1 
                   )
# 53 "src/Read/Parser.fsy"
                 : 'gentype_e));
# 260 "src/Read/gen/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "src/Read/Parser.fsy"
                                 ERead (_1, "long long") 
                   )
# 56 "src/Read/Parser.fsy"
                 : 'gentype_s));
# 271 "src/Read/gen/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "src/Read/Parser.fsy"
                                             ERead (_1, _3) 
                   )
# 57 "src/Read/Parser.fsy"
                 : 'gentype_s));
# 283 "src/Read/gen/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "src/Read/Parser.fsy"
                                            ERead (_1, _3) 
                   )
# 58 "src/Read/Parser.fsy"
                 : 'gentype_s));
# 295 "src/Read/gen/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_s in
            let _3 = parseState.GetInput(3) :?> 'gentype_a in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "src/Read/Parser.fsy"
                                             ERep (_1, AInt 0, _3) 
                   )
# 59 "src/Read/Parser.fsy"
                 : 'gentype_s));
# 307 "src/Read/gen/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_s in
            let _4 = parseState.GetInput(4) :?> 'gentype_a in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "src/Read/Parser.fsy"
                                                 ERep (_1, AInt 1, AAdd(AInt 1, _4)) 
                   )
# 60 "src/Read/Parser.fsy"
                 : 'gentype_s));
# 319 "src/Read/gen/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_e in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "src/Read/Parser.fsy"
                                           _2 
                   )
# 61 "src/Read/Parser.fsy"
                 : 'gentype_s));
# 330 "src/Read/gen/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "src/Read/Parser.fsy"
                                 AIdent _1 
                   )
# 64 "src/Read/Parser.fsy"
                 : 'gentype_a));
# 341 "src/Read/gen/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "src/Read/Parser.fsy"
                               AInt _1 
                   )
# 65 "src/Read/Parser.fsy"
                 : 'gentype_a));
# 352 "src/Read/gen/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_a in
            let _3 = parseState.GetInput(3) :?> 'gentype_a in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "src/Read/Parser.fsy"
                                    AAdd (_1, _3) 
                   )
# 66 "src/Read/Parser.fsy"
                 : 'gentype_a));
# 364 "src/Read/gen/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_a in
            let _3 = parseState.GetInput(3) :?> 'gentype_a in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "src/Read/Parser.fsy"
                                     ASub (_1, _3) 
                   )
# 67 "src/Read/Parser.fsy"
                 : 'gentype_a));
# 376 "src/Read/gen/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_a in
            let _3 = parseState.GetInput(3) :?> 'gentype_a in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "src/Read/Parser.fsy"
                                     AMul (_1, _3) 
                   )
# 68 "src/Read/Parser.fsy"
                 : 'gentype_a));
# 388 "src/Read/gen/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_a in
            let _3 = parseState.GetInput(3) :?> 'gentype_a in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "src/Read/Parser.fsy"
                                   ADiv (_1, _3) 
                   )
# 69 "src/Read/Parser.fsy"
                 : 'gentype_a));
# 400 "src/Read/gen/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_a in
            let _3 = parseState.GetInput(3) :?> 'gentype_a in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "src/Read/Parser.fsy"
                                   AMod (_1, _3) 
                   )
# 70 "src/Read/Parser.fsy"
                 : 'gentype_a));
# 412 "src/Read/gen/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_a in
            let _3 = parseState.GetInput(3) :?> 'gentype_a in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "src/Read/Parser.fsy"
                                   APow (_1, _3) 
                   )
# 71 "src/Read/Parser.fsy"
                 : 'gentype_a));
# 424 "src/Read/gen/Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "src/Read/Parser.fsy"
                                ACode _1 
                   )
# 72 "src/Read/Parser.fsy"
                 : 'gentype_a));
|]
# 436 "src/Read/gen/Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 20;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let expr lexer lexbuf : Syntax.Expr =
    engine lexer lexbuf 0 :?> _
